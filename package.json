{
  "name": "worklog-ai",
  "displayName": "Worklogs Generated By AI",
  "description": "Generate worklogs based on code changes or selected commits",
  "version": "0.1.6",
  "icon": "images/icon.png",
  "publisher": "DevendraParihar",
  "repository": {
    "type": "git",
    "url": "https://github.com/Prompt-To-Product/worklog-ai.git"
  },
  "author": {
    "name": "Rahul Sharma & Devendra Parihar"
  },
  "contributors": [
    {
      "name": "Rahul Sharma",
      "url": "https://github.com/rahul-0210/"
    },
    {
      "name": "Devendra Parihar",
      "url": "https://github.com/Devparihar5"
    }
  ],
  "license": "MIT",
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onView:worklogGeneratorView"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "worklog-ai.generateWorklog",
        "title": "‚ú® Generate New Worklog",
        "category": "Worklog AI"
      },
      {
        "command": "worklog-ai.generateWorklogFromCurrentChanges",
        "title": "‚ú® Create Worklog from Uncommitted Changes",
        "category": "Worklog AI",
        "icon": {
          "light": "$(diff)",
          "dark": "$(diff)"
        }
      },
      {
        "command": "worklog-ai.generateWorklogFromCommit",
        "title": "üìù Create Worklog from Commit History",
        "category": "Worklog AI",
        "icon": {
          "light": "$(git-commit)",
          "dark": "$(git-commit)"
        }
      },
      {
        "command": "worklog-ai.exportWorklog",
        "title": "üì§ Save Worklog to File",
        "category": "Worklog AI",
        "icon": {
          "light": "$(export)",
          "dark": "$(export)"
        }
      },
      {
        "command": "worklog-ai.refreshView",
        "title": "üîÑ Refresh Worklog Panel",
        "category": "Worklog AI",
        "icon": {
          "light": "$(refresh)",
          "dark": "$(refresh)"
        }
      },
      {
        "command": "worklog-ai.copyWorklog",
        "title": "üìã Copy Worklog to Clipboard",
        "category": "Worklog AI",
        "icon": {
          "light": "$(copy)",
          "dark": "$(copy)"
        }
      },
      {
        "command": "worklog-ai.openSettings",
        "title": "‚öôÔ∏è Configure Worklog Settings",
        "category": "Worklog AI",
        "icon": {
          "light": "$(gear)",
          "dark": "$(gear)"
        }
      }
    ],
    "viewsContainers": {
      "activitybar": [
        {
          "id": "worklog-ai",
          "title": "Worklog AI",
          "icon": "$(notebook-template)"
        }
      ]
    },
    "views": {
      "worklog-ai": [
        {
          "id": "worklogGeneratorView",
          "name": "Worklog Generator"
        }
      ]
    },
    "menus": {
      "view/title": [
        {
          "command": "worklog-ai.generateWorklogFromCurrentChanges",
          "when": "view == worklogGeneratorView",
          "group": "navigation@1"
        },
        {
          "command": "worklog-ai.generateWorklogFromCommit",
          "when": "view == worklogGeneratorView",
          "group": "navigation@2"
        },
        {
          "command": "worklog-ai.refreshView",
          "when": "view == worklogGeneratorView",
          "group": "navigation@3"
        },
        {
          "command": "worklog-ai.openSettings",
          "when": "view == worklogGeneratorView",
          "group": "navigation@4"
        }
      ],
      "view/item/context": [
        {
          "command": "worklog-ai.exportWorklog",
          "when": "view == worklogGeneratorView && viewItem == worklogResult",
          "group": "inline@1"
        },
        {
          "command": "worklog-ai.copyWorklog",
          "when": "view == worklogGeneratorView && viewItem == worklogResult",
          "group": "inline@2"
        }
      ],
      "commandPalette": [
        {
          "command": "worklog-ai.generateWorklog",
          "group": "Worklog AI"
        },
        {
          "command": "worklog-ai.generateWorklogFromCurrentChanges",
          "group": "Worklog AI"
        },
        {
          "command": "worklog-ai.generateWorklogFromCommit",
          "group": "Worklog AI"
        }
      ],
      "scm/title": [
        {
          "command": "worklog-ai.generateWorklogFromCurrentChanges",
          "group": "navigation",
          "when": "scmProvider == git"
        }
      ]
    },
    "configuration": {
      "title": "Worklog Generator",
      "properties": {
        "worklogGenerator.geminiApiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for Gemini"
        },
        "worklogGenerator.openaiApiKey": {
          "type": "string",
          "default": "",
          "description": "API Key for OpenAI"
        },
        "worklogGenerator.defaultLlmProvider": {
          "type": "string",
          "enum": [
            "gemini",
            "openai"
          ],
          "default": "gemini",
          "description": "Default LLM provider to use for worklog generation"
        },
        "worklogGenerator.defaultWorklogStyle": {
          "type": "string",
          "enum": [
            "technical",
            "business"
          ],
          "enumDescriptions": [
            "Technical Style - Detailed implementation with file names, functions, and technical specifics",
            "Business Style - Human-readable description of changes using action words like created, updated, implemented"
          ],
          "default": "business",
          "description": "Default style for worklog generation"
        },
        "worklogGenerator.autoGenerateOnCommit": {
          "type": "boolean",
          "default": false,
          "description": "Automatically generate worklog when committing changes"
        },
        "worklogGenerator.includeWorklogInCommitMessage": {
          "type": "boolean",
          "default": false,
          "description": "Include generated worklog in commit message"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/marked": "^5.0.2",
    "@types/mocha": "^8.2.2",
    "@types/node": "14.x",
    "@types/vscode": "^1.60.0",
    "@typescript-eslint/eslint-plugin": "^4.26.0",
    "@typescript-eslint/parser": "^4.26.0",
    "eslint": "^7.27.0",
    "glob": "^7.1.7",
    "mocha": "^8.4.0",
    "typescript": "^4.3.2",
    "vscode-test": "^1.5.2"
  },
  "dependencies": {
    "axios": "^0.21.1",
    "marked": "^4.0.10"
  }
}
